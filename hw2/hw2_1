import abc
from typing import Callable
import jax
import jax.numpy as jnp
import matplotlib.pyplot as plt
import numpy as np
import functools
import cvxpy as cp
from scipy import signal
import scipy.linalg as la

# these are the states and actions of the system, and corresponding index
# STATES = {"RUNNING": 0, "BROKEN_DOWN": 1, "OVERSPEEDING": 2, "DESTROYED": 3}
STATES_dict = {"RUNNING": 0, "BROKEN_DOWN": 1, "OVERSPEEDING": 2, "DESTROYED": 3}
STATES = ["RUNNING","BROKEN_DOWN","OVERSPEEDING","DESTROYED"]
ACTIONS = {"NOTHING": 0, "MAINTAIN": 1, "REPAIR": 2, "REPLACE": 3}
n = 4  ## 4 states and 4 actions


def construct_reward_array(STATES, V_tp1_all):
    # prob_matrix = construct_transition_probability_matrix()
    V_tp1_run = V_tp1_all[0]
    V_tp1_broken = V_tp1_all[1]
    V_tp1_over = V_tp1_all[2]
    V_tp1_destroyed = V_tp1_all[3]
    ##
    if STATES == "RUNNING":
        V_t_state = np.zeros(2)
        V_t_state[0] = 0.3 * (100 + V_tp1_run) + 0.63 * V_tp1_broken + 0.07 * (100 + V_tp1_over)
        V_t_state[1] = 0.6 * (100 + V_tp1_run) + 0.37 * V_tp1_broken + 0.03 * (100 + V_tp1_over) - 20
    elif STATES == "BROKEN_DOWN":
        V_t_state = np.zeros(3)
        V_t_state[0] = V_tp1_broken
        V_t_state[1] = 0.6 * (100 + V_tp1_run) + 0.37 * V_tp1_broken + 0.03 * (100 + V_tp1_over) - 40
        V_t_state[2] = 100 + V_tp1_run - 150
    elif STATES == "OVERSPEEDING":
        V_t_state = np.zeros(2)
        V_t_state[0] = 0.5 * (120 + V_tp1_over) + 0.5 * V_tp1_destroyed
        V_t_state[1] = 0.6 * (100 + V_tp1_run) + 0.37 * V_tp1_broken + 0.03 * (100 + V_tp1_over) - 40
    elif STATES == "DESTROYED":
        V_t_state = np.zeros(2)
        V_t_state[0] = V_tp1_destroyed
        V_t_state[1] = 100 + V_tp1_run - 150
    return V_t_state
    ########################

n_weeks = 20
V_all = {}
V_all["RUNNING"] = np.zeros(n_weeks+1)
V_all["BROKEN_DOWN"] = np.zeros(n_weeks+1)
V_all["OVERSPEEDING"] = np.zeros(n_weeks+1)
V_all["DESTROYED"] = np.zeros(n_weeks+1)
# V = np.zeros((len(STATES), n_weeks + 1))
V_all ["RUNNING"][-1] = np.array([200])
V_all ["BROKEN_DOWN"][-1] = np.array([30])
V_all ["OVERSPEEDING"][-1] = np.array([120])
V_all ["DESTROYED"][-1] = np.array([-50])
policy = {}
policy["RUNNING"] = np.zeros(n_weeks)
policy["BROKEN_DOWN"] = np.zeros(n_weeks)
policy["OVERSPEEDING"] = np.zeros(n_weeks)
policy["DESTROYED"] = np.zeros(n_weeks)
for week in range(n_weeks-1):
    ## starting from week 19
    t = n_weeks - week - 1
    V_tp1_all = np.array([V_all[s][t+1] for s in STATES])
    for state in STATES:
        V_t_state = construct_reward_array(state,V_tp1_all)
        V_all[state][t] = np.max(V_t_state)
        idx = np.argmax(V_t_state)
        if state == "RUNNING":
            policy[state][t] = idx
        elif state == "BROKEN_DOWN":
            if idx != 0 :
                idx = idx + 1
            policy[state][t] = idx
        elif state == "OVERSPEEDING":
            if idx == 0:
                idx = idx
            else: idx = idx +1
            policy[state][t] = idx
        elif state == "DESTROYED":
            if idx != 0:
                idx = idx + 2
            policy[state][t] = idx
        # # values.index(max(values))

## week 0
V_all["RUNNING"][0] = V_all["RUNNING"][1] + 100
# 0.6*(300)+0.37*30+0.03*220-20
# 0.3*(300)+0.63*30+0.07*220
# 0.6*(300)+0.37*30+0.03*220-40
# 0.5*(240)-0.5*50
# 0.6*277.7+0.37*157.7+0.03*257.7-20
# 0.3*277.7+0.63*157.7+0.07*257.7
# 0.6*277.7+0.37*157.7+0.03*257.7-40
# 0.5*(120+157.7)+0.5*150


##### UNCOMMENT THE FOLLOWING CODE #####
for t in range(n_weeks):
    action = []
    for state in STATES:
        if policy[state][t] == 0:
            action.append("NOTHING")
        elif policy[state][t] == 1:
            action.append("MAINTAIN")
        elif policy[state][t] == 2:
            action.append("REPAIR")
        elif policy[state][t] == 3:
            action.append("REPLACE")
    print("Week %i,:"%(t+1), action)
for t in range(n_weeks+1):
    print("Week %i,:"%(t+1), [np.round(V_all[state][t], 2).item() for state in STATES_dict.keys()])
